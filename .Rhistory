)  {               # number of mean values to try
n <- length(X)
mus <- seq(mu0, mu1, length.out=N)
## Lambda root finder, using modified Newton-Raphson method (Chen 2002, Wu 2005)
## http://sas.uwaterloo.ca/~cbwu/paper/05EL-R.pdf
L <- function(mu) {
#Step 0
Lambda = 0
gamma = 1
eps = 1e-8
#Step 1
D1 <- function(lambda) sum( (X-mu) / (n-lambda*(X-mu)))
D1. <- function(lambda) sum( (X-mu)^2 / (n-lambda*(X-mu))^2 )
D2 <- function(lambda) D1(lambda)/D1.(lambda)
for (k in 1:100) {
if (abs(D2(Lambda)) < eps) break
#Step 2
d = gamma*D2(Lambda)
while (sum(n-(Lambda-d)*(X-mu)<=0)>0) { # in case one or more are non-positive
gamma = gamma/2
d = gamma*D2(Lambda)
}
#Step 3
Lambda = Lambda - d
gamma = (k+1)^(-1/2)
}
Lambda
}
## p_i finder
p <- function(mu) {
lambda = L(mu)
1/(n-lambda*(X-mu))
}
## Profile empirical likelihood
lik <- function(mu) {
prod ( n*p(mu) )
}
## Profile empirical log-likelihood
loglik <- function(mu) {
sum ( log(n*p(mu)) )
}
## Confidence intervals and inference
CI <- function (X, alpha) {
chisq <- qchisq(alpha, 1, lower.tail=FALSE)
interval.test <- function(mu) {loglik(mu) > -chisq/2} # TRUE = in interval #-n*log(n)
h       <- c(-0.1*sd(X), 0.1*sd(X))
inner   <- c(mean(X), mean(X))
outer   <- inner+h
epsilon <- 1e-10
k       <- c(0,0)
for(j in 1:2) {                  #interval may be assymmetric
while (abs(h[j]) >= epsilon) { #finding interval using bisection
if (k[j]>100) {stop("Too many iterations!");break}
k[j]     <- k[j]+1
outer[j] <- inner[j]+h[j]
if(interval.test(outer[j])) {
inner[j] <- outer[j]   #make another jump
}
else h[j] <- h[j]/2      #make interval narrower
#print(c(k[j],inner[j],outer[j],h[j]))
}
}
message(paste0("Confidence interval computed in ", as.integer(k[1]), " iterations for lower bound and ", as.integer(k[2]), " for upper bound"))
#print(paste0("Confidence interval is (", signif(inner[1],digits=5), ", ", signif(inner[2],digits=5), ")"))
inner
#sapply(X, interval.test)
###### exactly the same for UPPer interval
#     h=sd(X)
#     for(k in 1:5) { #finding lower end of interval using bisection method
#       high1 = low0+h
#       if (!interval.test(high1)) { #if NOT in interval
#         h <- h/2                  #make a smaller jump to increase precision
#       }
#       else high0 <- high1           #keep going until interval found
#     }
#     print(paste("Upper bound",high0))
#consider the mean and go down in arbitrary increments
#until you find a point that lies outside the confidence interval
#then test the midpoint of the failed pt and last passed
#repeat until the difference is a certain tolerance
#output = lowest pass
#repeat process for upper bound of interval
##Does Newton Raphson apply here?
}
# Generate a data frame of mus, lambdas, likelihoods and log-likelihoods
# or give a (100-alpha)% confidence interval
switch(type,
df=data.frame(mu=mus, lambda=-sapply(mus,L), logel=sapply(mus,loglik), el=sapply(mus,lik)),
interval=CI(X,alpha) )
}
#testing
data(faithful)
durations <- faithful$eruptions
darwin <- sort(c(6.1, 1.0, 2.0, 0.7, 2.9, 3.5, 5.1, 1.8, 3.6, 7.0, 3.0, 9.3, 7.5, -8.4, -6.0))
EL(darwin, type='interval')
rm(list=ls())
# This function has four arguments.
# Only the dataset itself is required, however.
# For a vector of observations X, it will calculate lambdas and empirical log likelihoods
# Output is a dataframe containing mus, lambdas, liks & logliks, suitable for plotting.
EL <- function(X,                       # vector of observations
mu0=mean(X)-0.5*sd(X),  # minimum mean value
mu1=mean(X)+0.5*sd(X),  # maximum mean value
N=50,
type='df',
alpha=0.05
)  {               # number of mean values to try
n <- length(X)
mus <- seq(mu0, mu1, length.out=N)
## Lambda root finder, using modified Newton-Raphson method (Chen 2002, Wu 2005)
## http://sas.uwaterloo.ca/~cbwu/paper/05EL-R.pdf
L <- function(mu) {
#Step 0
Lambda = 0
gamma = 1
eps = 1e-8
#Step 1
D1 <- function(lambda) sum( (X-mu) / (n-lambda*(X-mu)))
D1. <- function(lambda) sum( (X-mu)^2 / (n-lambda*(X-mu))^2 )
D2 <- function(lambda) D1(lambda)/D1.(lambda)
for (k in 1:100) {
if (abs(D2(Lambda)) < eps) break
#Step 2
d = gamma*D2(Lambda)
while (sum(n-(Lambda-d)*(X-mu)<=0)>0) { # in case one or more are non-positive
gamma = gamma/2
d = gamma*D2(Lambda)
}
#Step 3
Lambda = Lambda - d
gamma = (k+1)^(-1/2)
}
Lambda
}
## p_i finder
p <- function(mu) {
lambda = L(mu)
1/(n-lambda*(X-mu))
}
## Profile empirical likelihood
lik <- function(mu) {
prod ( n*p(mu) )
}
## Profile empirical log-likelihood
loglik <- function(mu) {
sum ( log(n*p(mu)) )
}
## Confidence intervals and inference
CI <- function (X, alpha) {
chisq <- qchisq(alpha, 1, lower.tail=FALSE)
interval.test <- function(mu) {loglik(mu) > -chisq/2} # TRUE = in interval #-n*log(n)
h       <- c(-0.1*sd(X), 0.1*sd(X))
inner   <- c(mean(X), mean(X))
outer   <- inner+h
epsilon <- 1e-10
k       <- c(0,0)
for(j in 1:2) {                  #interval may be assymmetric
while (abs(h[j]) >= epsilon) { #finding interval using bisection
if (k[j]>100) {stop("Too many iterations!");break}
k[j]     <- k[j]+1
outer[j] <- inner[j]+h[j]
if(interval.test(outer[j])) {
inner[j] <- outer[j]   #make another jump
}
else h[j] <- h[j]/2      #make interval narrower
#print(c(k[j],inner[j],outer[j],h[j]))
}
}
message(paste0("Confidence interval computed in ", as.integer(k[1]), " iterations for lower bound and ", as.integer(k[2]), " for upper bound"))
#print(paste0("Confidence interval is (", signif(inner[1],digits=5), ", ", signif(inner[2],digits=5), ")"))
inner
#sapply(X, interval.test)
###### exactly the same for UPPer interval
#     h=sd(X)
#     for(k in 1:5) { #finding lower end of interval using bisection method
#       high1 = low0+h
#       if (!interval.test(high1)) { #if NOT in interval
#         h <- h/2                  #make a smaller jump to increase precision
#       }
#       else high0 <- high1           #keep going until interval found
#     }
#     print(paste("Upper bound",high0))
#consider the mean and go down in arbitrary increments
#until you find a point that lies outside the confidence interval
#then test the midpoint of the failed pt and last passed
#repeat until the difference is a certain tolerance
#output = lowest pass
#repeat process for upper bound of interval
##Does Newton Raphson apply here?
}
# Generate a data frame of mus, lambdas, likelihoods and log-likelihoods
# or give a (100-alpha)% confidence interval
switch(type,
df=data.frame(mu=mus, lambda=-sapply(mus,L), logel=sapply(mus,loglik), el=sapply(mus,lik)),
interval=CI(X,alpha) )
}
#testing
data(faithful)
durations <- faithful$eruptions
darwin <- sort(c(6.1, 1.0, 2.0, 0.7, 2.9, 3.5, 5.1, 1.8, 3.6, 7.0, 3.0, 9.3, 7.5, -8.4, -6.0))
EL(durations, type='interval')
?'confidence interval'
??'confidence interval'
mean(durations)+1.96*sd(durations)
mean(durations)-1.96*sd(durations)
rm(list=ls())
# This function has four arguments.
# Only the dataset itself is required, however.
# For a vector of observations X, it will calculate lambdas and empirical log likelihoods
# Output is a dataframe containing mus, lambdas, liks & logliks, suitable for plotting.
EL <- function(X,                       # vector of observations
mu0=mean(X)-0.5*sd(X),  # minimum mean value
mu1=mean(X)+0.5*sd(X),  # maximum mean value
N=50,
type='df',
alpha=0.05
)  {               # number of mean values to try
n <- length(X)
mus <- seq(mu0, mu1, length.out=N)
## Lambda root finder, using modified Newton-Raphson method (Chen 2002, Wu 2005)
## http://sas.uwaterloo.ca/~cbwu/paper/05EL-R.pdf
L <- function(mu) {
#Step 0
Lambda = 0
gamma = 1
eps = 1e-8
#Step 1
D1 <- function(lambda) sum( (X-mu) / (n-lambda*(X-mu)))
D1. <- function(lambda) sum( (X-mu)^2 / (n-lambda*(X-mu))^2 )
D2 <- function(lambda) D1(lambda)/D1.(lambda)
for (k in 1:100) {
if (abs(D2(Lambda)) < eps) break
#Step 2
d = gamma*D2(Lambda)
while (sum(n-(Lambda-d)*(X-mu)<=0)>0) { # in case one or more are non-positive
gamma = gamma/2
d = gamma*D2(Lambda)
}
#Step 3
Lambda = Lambda - d
gamma = (k+1)^(-1/2)
}
Lambda
}
## p_i finder
p <- function(mu) {
lambda = L(mu)
1/(n-lambda*(X-mu))
}
## Profile empirical likelihood
lik <- function(mu) {
prod ( n*p(mu) )
}
## Profile empirical log-likelihood
loglik <- function(mu) {
sum ( log(n*p(mu)) )
}
## Confidence intervals and inference
CI <- function (X, alpha) {
chisq <- qchisq(1-alpha, 1)
interval.test <- function(mu) {loglik(mu) > -chisq/2} # TRUE = in interval
h       <- c(-0.1*sd(X), 0.1*sd(X))
inner   <- c(mean(X), mean(X))
outer   <- inner+h
epsilon <- 1e-10
k       <- c(0,0)
for(j in 1:2) {                  #interval may be assymmetric
while (abs(h[j]) >= epsilon) { #finding interval using bisection
if (k[j]>100) {stop("Too many iterations!");break}
k[j]     <- k[j]+1
outer[j] <- inner[j]+h[j]
if(interval.test(outer[j])) {
inner[j] <- outer[j]   #make another jump
}
else h[j] <- h[j]/2      #make interval narrower
#print(c(k[j],inner[j],outer[j],h[j]))
}
}
message(paste0("Confidence interval computed in ", as.integer(k[1]), " iterations for lower bound and ", as.integer(k[2]), " for upper bound"))
#print(paste0("Confidence interval is (", signif(inner[1],digits=5), ", ", signif(inner[2],digits=5), ")"))
inner
#sapply(X, interval.test)
###### exactly the same for UPPer interval
#     h=sd(X)
#     for(k in 1:5) { #finding lower end of interval using bisection method
#       high1 = low0+h
#       if (!interval.test(high1)) { #if NOT in interval
#         h <- h/2                  #make a smaller jump to increase precision
#       }
#       else high0 <- high1           #keep going until interval found
#     }
#     print(paste("Upper bound",high0))
#consider the mean and go down in arbitrary increments
#until you find a point that lies outside the confidence interval
#then test the midpoint of the failed pt and last passed
#repeat until the difference is a certain tolerance
#output = lowest pass
#repeat process for upper bound of interval
##Does Newton Raphson apply here?
}
# Generate a data frame of mus, lambdas, likelihoods and log-likelihoods
# or give a (100-alpha)% confidence interval
switch(type,
df=data.frame(mu=mus, lambda=-sapply(mus,L), logel=sapply(mus,loglik), el=sapply(mus,lik)),
interval=CI(X,alpha) )
}
#testing
data(faithful)
durations <- faithful$eruptions
darwin <- sort(c(6.1, 1.0, 2.0, 0.7, 2.9, 3.5, 5.1, 1.8, 3.6, 7.0, 3.0, 9.3, 7.5, -8.4, -6.0))
EL(durations, type='interval')
test <- rnorm(30)
mean(test)+sd(test)*1.96
mean(test)-sd(test)*1.96
EL(test, type='interval')
?rnorm
mean(test)+1.96
?dnorm
dnorm((50.4-40)/sqrt(40))
1-dnorm((50.4-40)/sqrt(40))
1-dnorm((50.4-2)/(sqrt(40*8))
)
crit <- function(theta,n) {
n*theta+pnorm(0.05)*sqrt(n)*sqrt(theta^3) }
crit(1,40)
crit <- function(theta,n) {
n*theta+pnorm(0.95)*sqrt(n)*sqrt(theta^3) }
crit(1,40)
crit <- function(theta,n) {
n*theta+(1-qnorm(0.05))*sqrt(n)*sqrt(theta^3) }
crit(1,40)
qnorm(0.05)
dnorm(0.05)
crit <- function(theta,n) {
n*theta+(-qnorm(0.05))*sqrt(n)*sqrt(theta^3) }
crit(1,40)
phi <- function(n,theta0,theta1) {
1-pnorm((crit(theta0,n)-theta1)/(sqrt(n)*sqrt(theta1^3)))}
phi(20,1,2)
phi(40,1,2)
phi <- function(n,theta0,theta1) {
1-dnorm((crit(theta0,n)-theta1)/(sqrt(n)*sqrt(theta1^3)))}
phi(40,1,2)
phi(20,1,2)
phi(10,1,2)
phi(5,1,2)
phi(6,1,2)
phi(7,1,2)
(crit(40,1)-2)/(sqrt(40*2^3))
crit(40,1)
(crit(1,40)-2)/(sqrt(40*2^3))
dnorm(2.70)
dnorm(-2.70)
1-dnorm(2.70)
1-pnorm(2.70)
pnorm(2.70)
phi <- function(n,theta0,theta1) {
1-pnorm((crit(theta0,n)-theta1)/(sqrt(n)*sqrt(theta1^3)))}
phi(40,1,2)
phi <- function(n,theta0,theta1) {
pnorm((crit(theta0,n)-theta1)/(sqrt(n)*sqrt(theta1^3)))}
phi(40,1,2)
phi(20,1,2)
phi(10,1,2)
phi(5,1,2)
phi(2,1,2)
phi(3,1,2)
phi(4,1,2)
crit
plot(pos.x,pos.y, pch=shapes, col=colours)
colours <- c(2,2,3,4)
shapes <- c(15,16,15,17)
pos.x <- c(1,3,2,1)
pos.y <- c(1,2,3,4)
size <- c(7,4,3,3)
plot(pos.x,pos.y, pch=shapes, col=colours)
plot(pos.x,pos.y, pch=shapes, col=colours, xlim=c(0,5), ylim=c(0,5))
colours <- c(2,2,3,4)
shapes <- c(15,16,15,17)
pos.x <- c(1,3,2,1)
pos.y <- c(1,2,2,4)
size <- c(7,4,3,3)
plot(pos.x,pos.y, pch=shapes, col=colours, xlim=c(0,5), ylim=c(0,5))
colours <- c(2,2,3,4)
shapes <- c(15,16,15,17)
pos.x <- c(1,3,2,1)
pos.y <- c(1,2,4,2)
size <- c(7,4,3,3)
plot(pos.x,pos.y, pch=shapes, col=colours, xlim=c(0,5), ylim=c(0,5))
plot(pos.x,pos.y, pch=shapes, col=colours, xlim=c(0,5), ylim=c(0,5),
cex=size)
colours <- c(2,2,3,4)
shapes <- c(15,16,15,17)
pos.x <- c(1,3,2,1)
pos.y <- c(1,2,4,2)
size <- c(7,4,2,8)
plot(pos.x,pos.y, pch=shapes, col=colours, xlim=c(0,5), ylim=c(0,5),
cex=size)
colours <- c(2,2,3,4)
shapes <- c(15,16,15,17)
pos.x <- c(1,3,2,1)
pos.y <- c(1,2,4,2)
size <- c(7,4,8,2)
plot(pos.x,pos.y, pch=shapes, col=colours, xlim=c(0,5), ylim=c(0,5),
cex=size)
colours <- c(2,2,3,4)
shapes <- c(15,16,15,17)
pos.x <- c(1,3,2,1)
pos.y <- c(1,2,4,2)
size <- c(7,4,8,2)
plot(pos.x,pos.y, pch=shapes, col=colours, cex=size,
xlim=c(0,5), ylim=c(0,5), xlab="x", ylab="y")
library(tikzDevice)
install.packages("tikzDevice")
points(pos.x,pos.y,pch=ID)
ID <- c("A","B","C","D")
points(pos.x,pos.y,pch=ID)
points(pos.x,pos.y,pch=ID, col='white')
ID <- c("A","B","C","D")
colours <- c(2,2,3,4)
shapes <- c(15,16,15,17)
pos.x <- c(1,3,2,1)
pos.y <- c(1,2,4,2)
size <- c(7,4,8,3)
plot(pos.x,pos.y, pch=shapes, col=colours, cex=size,
xlim=c(0,5), ylim=c(0,5), xlab="x", ylab="y")
points(pos.x,pos.y,pch=ID, col='white')
library(tikzDevice)
tikz("shapes.tex")
plot(pos.x,pos.y, pch=shapes, col=colours, cex=size,
xlim=c(0,5), ylim=c(0,5), xlab="x", ylab="y")
points(pos.x,pos.y,pch=ID, col='white')
dev.off()
getwd()
points(pos.x[-4],pos.y[-4],pch=ID, col='white')
points(pos.x[-4],pos.y[-4],pch=ID, col='black')
R_size <- max(size)-min(size)
R_x <- max(pos.x)-min(pos.x)
R_y <- max(pos.y)-min(pos.y)
|-4|
dist <- matrix(0,4,4)
R_size <- max(size)-min(size)
R_x <- max(pos.x)-min(pos.x)
R_y <- max(pos.y)-min(pos.y)
similarity <- matrix(0,4,4)
for(i in 1:4) {
for (j in 1:4) {
similarity[i,j] <-
1-abs(size[i]-size[j])/R_size +
1-abs(pos.x[i]-pos.x[j])/R_x +
1-abs(pos.y[i]-pos.y[j])/R_y +
as.numeric(colours[i]==colours[j])/4 +
as.numeric(shapes[i]==shapes[j])/4
}}
View(similarity)
similarity <- matrix(0,4,4)
similarity
for(i in 1:4) {
for (j in 1:4) {
similarity[i,j] <- (
1-abs(size[i]-size[j])/R_size +
1-abs(pos.x[i]-pos.x[j])/R_x +
1-abs(pos.y[i]-pos.y[j])/R_y +
as.numeric(colours[i]==colours[j]) +
as.numeric(shapes[i]==shapes[j])
)/5
}}
similarity
plot(pos.x,pos.y, pch=shapes, col=colours, cex=size,
xlim=c(0,5), ylim=c(0,5), xlab="x", ylab="y")
points(pos.x,pos.y,pch=ID, col='white')
points(pos.x + c(0,0,0,-0.5),pos.y,pch=ID)
plot(pos.x,pos.y, pch=shapes, col=colours, cex=size,
xlim=c(0,5), ylim=c(0,5), xlab="x", ylab="y")
points(pos.x + c(0,0,0,-0.5),pos.y+c(0,0,0,0.1),pch=ID)
points(pos.x + c(0,0,0,-0.1),pos.y+c(0,0,0,0.1),pch=ID)
points(pos.x + c(0,0,0,-0.2),pos.y+c(0,0,0,0.1),pch=ID)
plot(pos.x,pos.y, pch=shapes, col=colours, cex=size,
xlim=c(0,5), ylim=c(0,5), xlab="x", ylab="y")
points(pos.x + c(0,0,0,-0.15),pos.y+c(0,0,0,0.1),pch=ID)
points(pos.x + c(0,0,0,-0.2),pos.y+c(0,0,0,0.15),pch=ID)
plot(pos.x,pos.y, pch=shapes, col=colours, cex=size,
xlim=c(0,5), ylim=c(0,5), xlab="x", ylab="y")
points(pos.x + c(0,0,0,-0.2),pos.y+c(0,0,0,0.15),pch=ID)
points(pos.x + c(0,-.2,0,-0.2),pos.y+c(0,.15,0,.15),pch=ID)
points(pos.x + c(-1.2,-.2,0,-0.2),pos.y+c(1,.15,0,.15),pch=ID)
points(pos.x + c(-.5,-.2,0,-0.2),pos.y+c(1,.15,0,.15),pch=ID)
points(pos.x + c(-.5,-.2,0,-0.2),pos.y+c(.4,.15,0,.15),pch=ID)
points(pos.x + c(-.4,-.2,0,-0.2),pos.y+c(.4,.15,0,.15),pch=ID)
points(pos.x + c(-.4,-.2,0,-0.2),pos.y+c(.35,.15,0,.15),pch=ID)
plot(pos.x,pos.y, pch=shapes, col=colours, cex=size,
xlim=c(0,5), ylim=c(0,5), xlab="x", ylab="y")
points(pos.x + c(-.4,-.2,0,-0.2),pos.y+c(.35,.15,0,.15),pch=ID)
points(pos.x + c(-.35,-.2,0,-0.2),pos.y+c(.35,.15,0,.15),pch=ID)
plot(pos.x,pos.y, pch=shapes, col=colours, cex=size,
xlim=c(0,5), ylim=c(0,5), xlab="x", ylab="y")
points(pos.x + c(-.35,-.2,0,-0.2),pos.y+c(.35,.15,0,.15),pch=ID)
points(pos.x + c(-.35,-.2,-.4,-0.2),pos.y+c(.35,.15,.35,.15),pch=ID)
plot(pos.x,pos.y, pch=shapes, col=colours, cex=size,
xlim=c(0,5), ylim=c(0,5), xlab="x", ylab="y")
points(pos.x + c(-.35,-.2,-.4,-0.2),pos.y+c(.35,.15,.35,.15),pch=ID)
install.packages('shiny')
library(shiny)
runExample('01_hello')
runApp('web_app')
getwd()
setwd('GitHub/MiningBalls')
runApp('web_app')
runApp('web_app')
runApp('web_app', display.mode='showcase')
source('~/GitHub/MiningBalls/web_app/server.R', echo=TRUE)
install.packages('shiny')
